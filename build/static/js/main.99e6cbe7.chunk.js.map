{"version":3,"sources":["static/languages.js","components/Editor/index.js","App.js","serviceWorker.js","index.js"],"names":["languageArray","MAX_HEIGHT","MIN_COUNT_OF_LINES","Editor","_useState","useState","_useState2","Object","slicedToArray","theme","setTheme","_useState3","_useState4","height","setHeight","_useState5","_useState6","language","setLanguage","_useState7","_useState8","isEditorReady","setIsEditorReady","_useState9","_useState10","code","setCode","_useState11","_useState12","imageSrc","setImageSrc","_useState13","_useState14","loading","setLoading","_useState15","_useState16","notFirstSelected","makeFirstSelected","valueGetter","useRef","counts","canvasCollections","totalCount","actualString","html2canvas","require","editorRef","createRef","handleEditorChange","useCallback","_","countOfLines","current","split","length","currentHeight","useEffect","window","gifshot","_editorRef$current","clientHeight","clientWidth","createGIF","gifWidth","gifHeight","images","frameDuration","obj","error","image","renderGifImage","newString","splice","join","then","canvas","push","Loader","react_default","a","createElement","className","renderLanguages","map","item","key","value","replace","str","toUpperCase","Fragment","src","alt","type","onChange","e","target","disabled","onClick","stringArr","ref","lib_default","editorDidMount","_valueGetter","editorComponent","onDidChangeModelContent","href","download","App","components_Editor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99e6cbe7.chunk.js","sourcesContent":["const languageArray = [\n    \"apex\",\n    \"azcli\",\n    \"bat\",\n    \"clojure\",\n    \"cpp\",\n    \"csharp\",\n    \"csp\",\n    \"css\",\n    \"dockerfile\",\n    \"fsharp\",\n    \"go\",\n    \"graphql\",\n    \"handlebars\",\n    \"html\",\n    \"ini\",\n    \"java\",\n    \"javascript\",\n    \"lua\",\n    \"less\",\n    \"markdown\",\n    \"msdax\",\n    \"mysql\",\n    \"objective-c\",\n    \"pascal\",\n    \"pgsql\",\n    \"php\",\n    \"postiats\",\n    \"powershell\",\n    \"pug\",\n    \"python\",\n    \"r\",\n    \"razor\",\n    \"ruby\",\n    \"rust\",\n    \"scheme\",\n    \"scss\",\n    \"solidity\",\n    \"sql\",\n    \"st\",\n    \"swift\",\n    \"typescript\",\n    \"vb\",\n    \"xml\",\n    \"yaml\",\n];\nexport default languageArray;\n","import React, { useState, useRef, useCallback, createRef, useEffect } from 'react';\nimport MonacoEditor from '@monaco-editor/react';\nimport languageArray from '../../static/languages';\n\n\nconst MAX_HEIGHT = 50;\nconst MIN_COUNT_OF_LINES = 9;\n\nfunction Editor() {\n  const [theme, setTheme] = useState('dark');\n  const [height, setHeight] = useState(198);\n  const [language, setLanguage] = useState('javascript');\n  const [isEditorReady, setIsEditorReady] = useState(false);\n  const [code, setCode] = useState('');\n  const [imageSrc, setImageSrc] = useState('');\n  const [ loading, setLoading ] = useState(false);\n  const [ notFirstSelected, makeFirstSelected ] = useState(false);\n  const valueGetter = useRef();\n  const counts = useRef(0);\n  const canvasCollections = useRef([]);\n  const totalCount = useRef(0);\n  const actualString = useRef('');\n  const html2canvas = require(\"html2canvas\");\n  const editorRef = createRef();\n\n  const handleEditorChange = useCallback(_ => {\n    const countOfLines = valueGetter.current().split(\"\\n\").length;\n    if (countOfLines >= MIN_COUNT_OF_LINES) {\n      const currentHeight = countOfLines * 22;\n      if (MAX_HEIGHT > currentHeight) {\n        setHeight(currentHeight);\n      }\n    }\n  }, []);\n\n  function handleEditorDidMount(_valueGetter, editorComponent) {\n    setIsEditorReady(true);\n    valueGetter.current = _valueGetter;\n    editorComponent.onDidChangeModelContent(handleEditorChange);\n  }\n\n  function renderGifImage() {\n    if (window.gifshot) {\n      const { clientHeight, clientWidth } = editorRef.current;\n      window.gifshot.createGIF({\n        'gifWidth': clientWidth,\n        'gifHeight': clientHeight,\n        'images': canvasCollections.current,\n        'frameDuration': 10\n      }, (obj) => {\n        if(!obj.error) {\n          setLoading(false);\n          canvasCollections.current = [];\n          const { image } = obj;\n          counts.current = 0;\n          setImageSrc(image);\n        }\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (counts.current > 0 && counts.current === totalCount.current) {\n      renderGifImage();\n    }\n    if (counts.current > 0 && counts.current < totalCount.current) {\n      counts.current = counts.current + 1;\n      const stringArr = actualString.current.split(/\\n/g);\n      const newString = stringArr.splice(0, counts.current).join('\\n');\n      html2canvas(editorRef.current).then(canvas => {\n        canvasCollections.current.push(canvas);\n        setCode(newString);\n      });\n    }\n  });\n\n  function modifyLanguageString(str) {\n    const tempStr = str.replace(/^./, str => str.toUpperCase()).replace('-', ' ');\n    return tempStr;\n  }\n\n  function handleShowValue() {\n    setLoading(true);\n    counts.current = 1;\n    const stringToModify = actualString.current = valueGetter.current();\n    const stringArr = stringToModify.split(/\\n/g);\n    totalCount.current = stringArr.length;\n    const newString = stringArr.splice(0, counts.current).join('\\n');\n    setCode(newString);\n  }\n  \n  function toggleTheme(e) {\n    setTheme(theme ==='light' ? 'dark' : 'light');\n  }\n  \n  function toggleLanguage(e) {\n    const { value } = e.target;\n    if (!notFirstSelected) {\n      makeFirstSelected(true);\n      setLanguage(value);\n    } else {\n      setLanguage(value);\n    }\n  }\n\n  const Loader = () => (<div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>);\n  const renderLanguages = languageArray.map(item => <option key={item} value={item}>{item ? modifyLanguageString(item) : '' }</option>)\n\n  return (\n    <>\n      <div className=\"logo\">\n        <img src=\"/logo.png\" alt=\"Logo for gif snippet\" />\n      </div>\n      <div className=\"editor-container\">\n        <div className=\"action-container\">\n          <div className=\"theme-switch\">\n            <label className=\"switch\">\n              <input type=\"checkbox\" onChange={toggleTheme} />\n              <span className=\"slider\"></span>\n            </label>\n            <span className=\"slider-text\">Light theme</span>\n          </div>\n          <div className=\"button-dropdown-container\">\n            <select\n              className=\"shadow-select\"\n              onChange={toggleLanguage}\n            >\n              <option value=\"\" disabled={notFirstSelected}>Choose language</option>\n              {renderLanguages}\n            </select>\n            <button\n              className=\"shadow-button\"\n              onClick={handleShowValue}\n              disabled={!isEditorReady}\n            >\n              Create GIF\n            </button>\n          </div>\n        </div>\n        <div className=\"editor-loader-container\">\n          <div ref={editorRef}>\n            <MonacoEditor\n              height={height}\n              theme={theme}\n              language={language}\n              value={code}\n              editorDidMount={handleEditorDidMount}\n              loading={<Loader />}\n            />\n          </div>\n          {loading && <div className=\"loader-wrapper\"><Loader /></div>}\n        </div>\n        {imageSrc && (\n          <div>\n            <a\n              href={imageSrc}\n              download=\"snippet.gif\"\n              className=\"shadow-button download-button\"\n            >Download</a>\n            <img src={imageSrc} alt=\"snippent gif\" />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Editor;","import './App.css';\n\nimport Editor from './components/Editor';\n\nimport React from 'react';\nconst App = () => <Editor />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}